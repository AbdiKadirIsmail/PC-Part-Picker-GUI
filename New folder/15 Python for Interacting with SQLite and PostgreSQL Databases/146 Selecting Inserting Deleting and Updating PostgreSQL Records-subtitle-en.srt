1
00:00:00,060 --> 00:00:06,810
Very good, in this lecture you will learn, how
to connect to a PostgreSQL database, how

3
00:00:06,810 --> 00:00:11,210
to create tables in a PostgreSQL
database, insert data, view data and

5
00:00:11,210 --> 00:00:17,340
delete and update rows as well.
The script you're looking at now

7
00:00:17,340 --> 00:00:22,410
though is the script that you build in
the previous lectures using a SQLite

9
00:00:22,410 --> 00:00:27,090
database, so if you haven't watched those
lectures are highly recommended to go

11
00:00:27,090 --> 00:00:31,380
through them first, then you come here
because in this lecture I'll just go

13
00:00:31,380 --> 00:00:37,380
through this code and replace only a few
lines of them and that suggests that the

15
00:00:37,380 --> 00:00:42,960
code that you use for sqlite3 library
is very similar to the code we'll use

17
00:00:42,960 --> 00:00:48,539
for a psycopg2 which is a library
used to connect to PostgreSQL databases.

19
00:00:48,539 --> 00:00:54,930
The main difference is that your
database will not be a DB file storing

21
00:00:54,930 --> 00:00:58,260
your file system.
It will be a database embedded in your

23
00:00:58,260 --> 00:01:03,600
PostgreSQL installation, and so the first
requirement is that you need to have an

25
00:01:03,600 --> 00:01:08,340
existing database in your PostgreSQL
database server, and PostgreSQL comes

27
00:01:08,340 --> 00:01:11,580
with a default database, so once you
install PostgreSQL you'll have.

29
00:01:11,580 --> 00:01:16,799
a database called Postgres so we can just
pass the database here. Or if you like

31
00:01:16,799 --> 00:01:22,830
you can create your own database, so you
just need to go to your PostgreSQL

33
00:01:22,830 --> 00:01:28,979
installation and you can create a
database through pgAdmin, so here are

35
00:01:28,979 --> 00:01:33,540
your database servers and this is a
default one. You need to connect to your

37
00:01:33,540 --> 00:01:39,689
database server first. Then this would be
the password that you created when you

39
00:01:39,689 --> 00:01:48,509
install Postgres. Postgres123 was mine.
All right so I was successfully

41
00:01:48,509 --> 00:01:53,369
connected and I have three databases.
So this is the default database that I was

43
00:01:53,369 --> 00:01:58,439
talking about and these are two other
databases I have created. So to create a

45
00:01:58,439 --> 00:02:06,149
a new database just right click on
databases and then new database. Let's say

47
00:02:06,149 --> 00:02:15,110
database1 and you need to specify the
owner, so the user of your database.

49
00:02:15,110 --> 00:02:20,730
Postgres, this is what I specified
when I installed PostgreSQL and this should

51
00:02:23,879 --> 00:02:29,040
a database here. If you click to that you
will connect to it. Now you can just call

53
00:02:29,040 --> 00:02:35,310
this and go back to Python.
Ok let me first comment these lines out

55
00:02:35,310 --> 00:02:41,370
so when I execute the script
I don't get this function instances called.

57
00:02:41,370 --> 00:02:46,470
So we have an empty database so the
first thing we would like to do is to

59
00:02:46,470 --> 00:02:52,849
create a table, but first of all I would
like to change this to psyco2 and

61
00:02:52,849 --> 00:03:01,819
of course I would like to make a
batch placement of SQLite3.

63
00:03:01,819 --> 00:03:08,849
Replace it with psycopg2, so I want
all these library names here to be

65
00:03:08,849 --> 00:03:15,840
placed with a psycopg2, so replace all
and just press escape and that goes away.

67
00:03:15,840 --> 00:03:21,900
Luckily this code is the same as
sqlite3 library so we have connects

69
00:03:21,900 --> 00:03:26,510
and then we have a cursor object, then we
have the execute method, commit, and close.

71
00:03:26,510 --> 00:03:31,440
All we have to do is change the
parameters here, and here we would want

73
00:03:31,440 --> 00:03:37,470
to pass the database name, the user name,
the host, the password and the port

75
00:03:37,470 --> 00:03:42,900
number of your database server, and all
that comes inside quotes.

77
00:03:42,900 --> 00:03:48,540
So it is passed as a string to the
connect method. First we have

79
00:03:48,540 --> 00:03:53,580
the database name, so the parameter dbname
and that will be equal to a value, so you

81
00:03:53,580 --> 00:03:59,519
need to insert the value inside single
quotes, so that is database 1, the name of

83
00:03:59,519 --> 00:04:06,750
the database. Then you have user and be
aware that you don't need to use commas

85
00:04:06,750 --> 00:04:11,970
in here so all this goes as a string and
it is read as a string by the connect

87
00:04:11,970 --> 00:04:24,530
method, so user goes inside quotes.
Postgres then we have the password

89
00:04:24,530 --> 00:04:30,950
Posgres123, then you have
the hostname, so the host parameter

91
00:04:30,950 --> 00:04:37,970
and that should be localhost.
Alright so local host should be your host

93
00:04:37,970 --> 00:04:41,350
name and it's always like that.
and last we have the port number and

95
00:04:45,320 --> 00:04:51,140
that goes inside quotes as well so 5432.
So those are the parameters you pass to

97
00:04:51,140 --> 00:04:58,550
your connection method of the psycopg2
library. Then let's try to call that

99
00:04:58,550 --> 00:05:04,070
function, so create table is the function
and I'll save the script so let me make

101
00:05:04,070 --> 00:05:07,820
sure you know what it's happening here.
So we connect to the database and then we

103
00:05:07,820 --> 00:05:12,230
have the same methods for the psycopg2
library so we are creating a table

105
00:05:12,230 --> 00:05:17,930
name store and then we have three
columns for that table, and we commit

107
00:05:17,930 --> 00:05:26,180
those changes and we close the connection
so save the script, CTRL S and then

109
00:05:26,180 --> 00:05:33,680
call the script and that looks
successful. If you like you can just go

111
00:05:33,680 --> 00:05:45,200
to pgAdmin and here you can see the
table that you have just created, so just

113
00:05:45,200 --> 00:05:52,190
enter the password and you need to go to
your database, so database1 expand that.

115
00:05:52,190 --> 00:06:00,800
Then you need to go to schemas
public, tables and this is our table name.

117
00:06:00,800 --> 00:06:05,600
So we have the store table and you
got three columns, item, quantity and price.

119
00:06:05,600 --> 00:06:10,880
All right, we have an empty table
so let's go ahead and insert some data

121
00:06:10,880 --> 00:06:14,690
to that table.
I'll just copy this connection string

123
00:06:14,690 --> 00:06:22,910
and paste it in here. Then remember that
we use question marks when inserting

125
00:06:22,910 --> 00:06:28,849
values for sqlite3.
If you want you could use

127
00:06:28,849 --> 00:06:35,090
string formatting placeholders.
So one for the item, the one for

129
00:06:35,090 --> 00:06:42,749
quantity and another one for the price.
and then after coma, let me delete this.

131
00:06:42,749 --> 00:06:52,770
After the quotes sorry, you'd pass
the percentage, so you're ready now string

133
00:06:52,770 --> 00:06:58,319
formatting and then you specify the
tuple of the variables you want to

135
00:06:58,319 --> 00:07:06,509
insert here, so item, quantity, and price.
So you can use this but this would be

137
00:07:06,509 --> 00:07:13,469
prone to SQL injections from attackers,
so it's not a good idea. I can ahead and

139
00:07:13,469 --> 00:07:22,020
execute this actually just to see what
happens so let's say Apple, and 10, and 15

141
00:07:22,020 --> 00:07:29,370
for the price. Let me execute this, so it
looks like it worked and we can check it

143
00:07:29,370 --> 00:07:37,770
in the table here. So you can just go to
your database which is database1 and

145
00:07:37,770 --> 00:07:48,509
here you can execute a simple SQL query.
Select all from store and go to run and

147
00:07:48,509 --> 00:07:55,699
you see that Apple was added to the table,
so it works, but it's risky to use

149
00:07:55,699 --> 00:08:01,740
Python string formatting so what you
want to do is, I'll just leave it for

151
00:08:01,740 --> 00:08:10,860
a while there so that you compare
things out, and to avoid SQL injections you

153
00:08:10,860 --> 00:08:16,729
should actually pass your variables as a
second parameter to the execute method.

155
00:08:16,729 --> 00:08:24,020
So what does that mean is you don't have
to use quotes, so you just pass

157
00:08:24,020 --> 00:08:31,979
%s just like that, and then you
put a comma here so that that means this

159
00:08:31,979 --> 00:08:37,350
string inside double quotes is
the 1 argument and then

161
00:08:37,350 --> 00:08:43,169
this one here is the other argument and then
you pass your variables so that should

163
00:08:43,169 --> 00:08:48,330
work now. So I'm sure you can see the
difference between this and this.

165
00:08:48,330 --> 00:08:58,290
And I'll just comment this out so that it
isn't executed and let's say orange same

167
00:08:58,290 --> 00:09:10,710
price and quantity. Execute and let's get
and check in pgAdmin, so let me execute

169
00:09:10,710 --> 00:09:19,200
the query again and you see that orange was
added as a new row to the table. So this

171
00:09:19,200 --> 00:09:25,200
is the way to go and I'll delete this.
Alright, now let's look at the view

173
00:09:25,200 --> 00:09:30,810
function, so what a few function is doing
is it connects to the database and it

175
00:09:30,810 --> 00:09:35,850
selects all the rows from the store
table, and then we store those rows in the

177
00:09:35,850 --> 00:09:41,280
row variable using the fetch all method
and then we return those rows as a function

179
00:09:41,280 --> 00:09:47,310
output. Everything you need to change
here is the argument of the connect

181
00:09:47,310 --> 00:09:53,820
method, so just put them here and you
should be good to go.

183
00:09:53,820 --> 00:10:05,270
So let me view, call the function, and execute.
And yeah, we need to print it. Forgot it.

185
00:10:07,010 --> 00:10:13,860
And yeah, so we got Apple, and we got three
oranges now because when I executed

187
00:10:13,860 --> 00:10:19,230
the script here I got the insert
function executed again so we got two

189
00:10:19,230 --> 00:10:24,720
oranges and another one when you used
string formatting placeholders, so you

191
00:10:24,720 --> 00:10:33,060
get the idea. Let's look at the delete
function. Again we need to pass the arguments

193
00:10:33,060 --> 00:10:40,650
of psycopg2 connection. Then we
have delete from store where item again

195
00:10:40,650 --> 00:10:47,820
we can't use a question mark so we need
to use %s, and then as a second

197
00:10:47,820 --> 00:10:53,449
argument we pass the item variable,
so it is same as sqlite3, but we use

199
00:10:53,449 --> 00:11:06,110
%s here and let me call delete.
I'll comment this out and delete here so what

201
00:11:06,110 --> 00:11:11,899
you want to delete is the item. What item?
Let's say we want to delete rows

203
00:11:11,899 --> 00:11:17,600
where the item is equal to orange, also
let's see how this goes. And yeah,

205
00:11:17,600 --> 00:11:23,029
the item was deleted. The rows with the item
orange were deleted and we got the view

207
00:11:23,029 --> 00:11:30,379
function executed, so we got one row now.
Our table has only one row. A quick look at

209
00:11:30,379 --> 00:11:38,569
the update method now. Just like that.
And here we are updating the store table,

211
00:11:38,569 --> 00:11:44,990
and there we are setting, so we are updating
the quantity to this value and the price

213
00:11:44,990 --> 00:11:54,199
as well to this value where the item is equal
to this value. All right so we got

215
00:11:54,199 --> 00:11:58,819
1, 2, 3 values and we pass three
variables here after the coma, so as a

217
00:11:58,819 --> 00:12:06,550
second argument of the execute method,
and the update method gets three arguments.

219
00:12:06,550 --> 00:12:14,949
Let me comment this out and update.
We have only morrow so I would like to

221
00:12:14,949 --> 00:12:23,089
set the quantity of apples to
let's say 20 and the price let's give

223
00:12:23,089 --> 00:12:33,559
the price the same and for the item
Apple, just like that, and execute.

225
00:12:33,559 --> 00:12:37,670
And we got the quantity changed to 20,
so that was it.

227
00:12:37,670 --> 00:12:41,809
I believe that was quite simple so if you
learned sqlite3 before, this was

229
00:12:41,809 --> 00:12:46,699
quite simple for you, and if you have any
question just feel free to drop them in

231
00:12:46,699 --> 00:12:52,839
the discussion section. I'll be happy to
answer. See in the next lecture.

