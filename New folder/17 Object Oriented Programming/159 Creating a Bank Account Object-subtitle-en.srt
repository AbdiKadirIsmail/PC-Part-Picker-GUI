1
00:00:00,060 --> 00:00:05,220
Well in the previous lectures I
mentioned that I'll be creating a program,

3
00:00:05,220 --> 00:00:11,400
an application where we'll be handling a
sort of bank account so that we'll have

5
00:00:11,400 --> 00:00:15,059
a balance, and then we'll be applying
some operations such as

7
00:00:15,059 --> 00:00:20,970
withdraw money from this bank account
object, and deposit money as well. I will

9
00:00:20,970 --> 00:00:28,349
be storing the values of the balance in
a simple text file. So that's not one of

11
00:00:28,349 --> 00:00:32,910
ten programs we're building in the course.
This is just to get you familiar with

13
00:00:32,910 --> 00:00:41,640
classes and to explain them a little bit
more, so I'll do some housekeeping here.

15
00:00:41,640 --> 00:00:56,190
So let me create a folder here, and put
all these existing files in this folder.

17
00:00:56,190 --> 00:01:01,890
So we have the previous files in here and
I'll create a new folder now let's call

19
00:01:01,890 --> 00:01:08,670
this account, and it is folder I'll have
my Python script, so let's call it like

21
00:01:08,670 --> 00:01:16,470
this, so on the account we have this
Python file and we also need this text

23
00:01:16,470 --> 00:01:23,880
file where we'll be saving the current
balance of our bank account, so this will

25
00:01:23,880 --> 00:01:29,939
be a trivial application because in real
life you don't want to save the bank

27
00:01:29,939 --> 00:01:34,110
account information, the balance in
a text file. In real life you do want to

29
00:01:34,110 --> 00:01:40,079
save that in a real database such as
PostgreSQL for instance, but for the

31
00:01:40,079 --> 00:01:44,549
sake of practicing object-oriented
programming we will just save the

33
00:01:44,549 --> 00:01:51,450
balance value in this file, so this is
our storage. And also for the sake of

35
00:01:51,450 --> 00:01:58,350
simplicity we'll be working only on one
single account so our program will be

37
00:01:58,350 --> 00:02:03,509
able to process one account object
because if you have multiple accounts

39
00:02:03,509 --> 00:02:10,289
then the solution could be different
from this, so you'd probably have to

41
00:02:10,289 --> 00:02:13,349
think about having a table and maybe
a database would be necessary here.

43
00:02:13,349 --> 00:02:21,450
So let's think about our personal account.
You could use this program for

45
00:02:21,450 --> 00:02:25,980
your personal notes, say you may want to
keep track of your balance and you can

47
00:02:25,980 --> 00:02:33,329
use this Python program, and now the
object here is the bank account and about

49
00:02:33,329 --> 00:02:39,840
this object we should start thinking about
what attributes this bank account object

51
00:02:39,840 --> 00:02:47,909
should have as an initial state. So we
talked about this minimal object and

53
00:02:47,909 --> 00:02:53,430
a bank account would have of course an
initial balance, so let's start to create

55
00:02:53,430 --> 00:02:58,409
this account object and call it account.
You can call it whatever you want, but

57
00:02:58,409 --> 00:03:05,549
I'll call it account, so in itis the
first function we want to define and we

59
00:03:05,549 --> 00:03:12,449
will pass self in there, and let's keep
it like that for a moment, and we said

61
00:03:12,449 --> 00:03:19,439
our bank account object will have
balance attribute, and in our case we have

63
00:03:19,439 --> 00:03:28,650
this balance dot txt and let's create
an initial value there, and to create

65
00:03:28,650 --> 00:03:35,549
an object instance we need to grab this
value and pass it to our init function

67
00:03:35,549 --> 00:03:43,379
so that we construct this minimal object.
And because we have a file, what we need

69
00:03:43,379 --> 00:03:49,680
to do is we need to read this number
from this file, and naturally what you'd

71
00:03:49,680 --> 00:03:56,579
want to pass here is some parameter like
file path, so this is how I'm going to

73
00:03:56,579 --> 00:04:03,989
call that, and now if you remember in the
bookstore application in the backend

75
00:04:03,989 --> 00:04:10,439
script, here we also passed a parameter to
the init function, and then we created a

77
00:04:10,439 --> 00:04:19,019
connection object out of this database file.
In this particular case what we

79
00:04:19,019 --> 00:04:27,070
want to create is an integer, so a number
of this file, out of this file path.

81
00:04:27,070 --> 00:04:34,450
So you could do something like with
open, so we're doing a file handling

83
00:04:34,450 --> 00:04:43,930
with method. With open file path.
And this is a text file, so we need

85
00:04:43,930 --> 00:04:51,010
to go with r mode which means read,
so we're opening the file path of the

87
00:04:51,010 --> 00:04:59,770
file, this file in read mode as a file.
So this is just a temporary

89
00:04:59,770 --> 00:05:06,730
variable that exists in this with
statement, and then we need to read from

91
00:05:06,730 --> 00:05:12,460
this file, so something like file dot read.
Yeah, that's it. This will read the file,

93
00:05:12,460 --> 00:05:18,370
but you you're not storing that
anywhere, so what you want to do is say

95
00:05:18,370 --> 00:05:27,400
self and balance equals to file dot read.
So what that will do it will save the

97
00:05:27,400 --> 00:05:31,480
value inside the text file in this
instance variable, so this is an instance

99
00:05:31,480 --> 00:05:37,120
variable, that is how it's called. Actually
this is the instance variable and this

101
00:05:37,120 --> 00:05:45,610
is the object, so the account object. Good.
This is almost good and we also need to

103
00:05:45,610 --> 00:05:52,480
add the integer function that because this
will be read as a string by default so

105
00:05:52,480 --> 00:05:55,420
we need to convert that value
to an integer.

107
00:05:55,420 --> 00:06:01,030
Yeah, that should work and that should
construct the object for us, the account

109
00:06:01,030 --> 00:06:09,670
object with a balance attached to it.
And before going and creating the like a

111
00:06:09,670 --> 00:06:16,750
withdraw method here, and then deposit
methods, I'd prefer to call an instance

113
00:06:16,750 --> 00:06:21,670
of this class first.
So how to do that here? Let's say

115
00:06:21,670 --> 00:06:28,510
store that in that account variable so
this will be the object, the object that

117
00:06:28,510 --> 00:06:35,580
will be created out of this blueprint,
the account blueprint, and there

119
00:06:35,580 --> 00:06:40,719
you need to pass this argument,
the argument for this parameter

121
00:06:40,719 --> 00:06:48,610
which is balance dot txt. Great, and for
self Python will automatically pass the

123
00:06:48,610 --> 00:06:56,379
account object instance. Good, now this will
create an object instance and let me

125
00:06:56,379 --> 00:07:05,979
print out that object here, so we see
some output in action. Python and that's

127
00:07:05,979 --> 00:07:14,439
inside account folder and acc.py. We got
an error. No such file or directory for

129
00:07:14,439 --> 00:07:19,589
balances dot txt, and the reason to that
is that we need to pass the account

131
00:07:19,589 --> 00:07:27,849
directory there as well. Yeah, this
time it's working, so we had to pass the

133
00:07:27,849 --> 00:07:32,169
directory there because we are in this
folder in the demo folder and you need

135
00:07:32,169 --> 00:07:36,869
to pass the account folder first and then
the points to the balance of txt.

137
00:07:36,869 --> 00:07:46,360
This is the output, so it says main dot
account object, so the account object of

139
00:07:46,360 --> 00:07:55,529
the main module, and what main is, is when
you execute a script like we did here,

141
00:07:55,529 --> 00:08:03,339
so you point to the script with Python,
Python will assign this name to the

143
00:08:03,339 --> 00:08:10,029
module, so this module will get this name.
And the script actually, but it's

145
00:08:10,029 --> 00:08:19,149
treated as a module, but if you import
module, so if I ran, I open an interactive

147
00:08:19,149 --> 00:08:29,739
shell now, so from the account folder
import acc what happens is that you get

149
00:08:29,739 --> 00:08:35,800
the print function executed as well, but
this time when you import that file, so when

151
00:08:35,800 --> 00:08:40,899
you don't execute it like we did
previously with Python account acc.py,

153
00:08:40,899 --> 00:08:47,290
when you import the module,
the module gets the name of the script that

155
00:08:47,290 --> 00:08:52,810
it is written to, so in this case is acc
without the extension.

157
00:08:52,810 --> 00:08:59,860
And here you also get the name of the
package of the module, so packages are

159
00:08:59,860 --> 00:09:05,410
made of modules and a package is like a
folder and there you have several modules,

161
00:09:05,410 --> 00:09:10,779
or one module like we have
in this case, and our package here is

163
00:09:10,779 --> 00:09:16,149
account, so accountant then has this
module, and then this module has this

165
00:09:16,149 --> 00:09:23,620
class the account class, so that was
something I wanted to show you.

167
00:09:23,620 --> 00:09:32,709
Packages, modules, and classes. Great, now
I'll exit this plan shell and play

169
00:09:32,709 --> 00:09:38,019
around with this script a little bit.
And what we did here, we printed out the

171
00:09:38,019 --> 00:09:43,389
object to namespace and we didn't get
the actual balance as an output because

173
00:09:43,389 --> 00:09:50,949
we are not returning the balance here.
But if you want to get the balance, you'd

175
00:09:50,949 --> 00:09:57,160
want to point to the balance and that
uses a dot notation to point to the

177
00:09:57,160 --> 00:10:05,350
object that holds the balance attribute.
So let's see what we get this time.

179
00:10:05,350 --> 00:10:10,180
Yeah, 1 000, so that's the current balance.
As you can see you are able to

181
00:10:10,180 --> 00:10:15,069
access attributes of your
object instance using the dot notation.

183
00:10:15,069 --> 00:10:22,120
Good, now let's add these other
methods there and what can we do to that

185
00:10:22,120 --> 00:10:30,009
bank account? Well we can withdraw money.
And you always need to pass self in

187
00:10:30,009 --> 00:10:34,569
all of your methods, and then the
parameter that applies to that

189
00:10:34,569 --> 00:10:40,089
particular method. In this case when you
withdraw some money, well you have an

191
00:10:40,089 --> 00:10:47,199
amount in mind that you want to withdraw
so you pass amount there as a parameter.

193
00:10:47,199 --> 00:10:52,839
And now just to be clear that you
understand what I'm doing, what I'm doing

195
00:10:52,839 --> 00:11:01,000
here is I have an initial balance
that is being read from this file so for

197
00:11:01,000 --> 00:11:06,640
this text file, and then I want to allow
the user to apply operations,

199
00:11:06,640 --> 00:11:12,130
so withdraw money from these balance,
and once the user executes the withdraw

201
00:11:12,130 --> 00:11:19,360
method, I want to update the balance
number inside the object instance, and I

203
00:11:19,360 --> 00:11:25,750
don't want yet to write that balance to
my balance file so I just want to

205
00:11:25,750 --> 00:11:34,720
calculate something here like self
balance equals to self balance, this

207
00:11:34,720 --> 00:11:39,310
is a withdraw so minus the amount that
I want to withdraw. That means this will

209
00:11:39,310 --> 00:11:43,960
do a self balance equals to one thousand
minus one hundred, let's say and I'll end

211
00:11:43,960 --> 00:11:51,130
up with an updated balance of nine hundred
in this case, and then if I want

213
00:11:51,130 --> 00:11:59,140
I can go ahead and open that file again
here and then write these updated

215
00:11:59,140 --> 00:12:04,390
balance in that file, so that would be
one solution, but a more constructive

217
00:12:04,390 --> 00:12:10,480
solution would probably be to have a
specific method that commits the changes

219
00:12:10,480 --> 00:12:15,760
to the file. So you may want to withdraw
some money, and then you deposit some money

221
00:12:15,760 --> 00:12:20,620
the money inside the same session and
then you apply the committee method to

223
00:12:20,620 --> 00:12:26,290
save the changes. So this is the solution
I want to go for. And yeah, we are done with

225
00:12:26,290 --> 00:12:34,840
the withdraw methods. Now deposit self
and amount again, so this is a local

227
00:12:34,840 --> 00:12:40,660
variable. This is a local variable.
They happen to have the same name, but they

229
00:12:40,660 --> 00:12:51,030
don't have to do much with each other.
Self balance equals to self balance

231
00:12:51,030 --> 00:12:59,800
plus the amount in this case, so let's
see what we have this far, and I'll keep

233
00:12:59,800 --> 00:13:06,450
this instance object here that is being
generated so we are instantiating an

235
00:13:06,450 --> 00:13:12,670
object instance in other words, and print
out the current balance, and then I want

237
00:13:12,670 --> 00:13:20,350
to withdraw some money from my account
object. That means I apply withdraw

239
00:13:20,350 --> 00:13:27,520
to the account object, and withdraw takes two
arguments, so the object instance which

241
00:13:27,520 --> 00:13:35,050
is passed automatically and then the
amount which could be 100. And once I do

243
00:13:35,050 --> 00:13:44,370
that I want to print out the updated
balance, so let's see what it's gonna do.

245
00:13:44,370 --> 00:13:54,340
Yeah, 1000 so an object instance is created,
and you get 1000 printed out because here

247
00:13:54,340 --> 00:13:58,330
you have 1000 and then you take 100
out of that and so you end up

249
00:13:58,330 --> 00:14:06,880
with 900. Great, so if you run that again
you will notice that a new object

251
00:14:06,880 --> 00:14:13,420
instance is being created again, so you
don't have 900 as the current balance anymore.

253
00:14:13,420 --> 00:14:21,880
You have 1000, so that means you
need to write the changes to the file

255
00:14:21,880 --> 00:14:28,060
if you wanted to save those, that balance.
And we can do that using a method,

257
00:14:28,060 --> 00:14:38,400
let's call it commit, pass self
there and I don't think of any

259
00:14:38,400 --> 00:14:43,540
parameter that I need to pass to this
commit method because all we will

261
00:14:43,540 --> 00:14:49,810
work with are the existing variables there.
So this would be something like

263
00:14:49,810 --> 00:14:58,390
with open. Well we need to open the file
path, but we have a small problem here.

265
00:14:58,390 --> 00:15:04,350
Because the fault path variable now
is just a local variable in this init

267
00:15:04,350 --> 00:15:10,930
method, so if we pass that here this
function with this method will not

269
00:15:10,930 --> 00:15:17,950
recognize it, so this is a bit different
from the other, the backend script that

271
00:15:17,950 --> 00:15:24,910
we wrote because here we have this
parameter like we do in here, but in this

273
00:15:24,910 --> 00:15:30,880
case this parameter it was only used
inside the init methods so we didn't use

275
00:15:30,880 --> 00:15:36,210
it anywhere else.
So there is a solution to that.

277
00:15:36,210 --> 00:15:42,850
One solution would be to go ahead
and pass another, let's call this path here,

279
00:15:42,850 --> 00:15:48,340
so another parameter to the commit method.
Then when we call the commit method

281
00:15:48,340 --> 00:15:55,720
like we were doing with withdraw,
we'd have to pass the balance dot txt.

283
00:15:55,720 --> 00:16:02,260
Actually this path to the commit method.
While that'll work, it's still not the

285
00:16:02,260 --> 00:16:09,880
best practice of object-oriented paradigm,
so we need to seek for another solution,

287
00:16:09,880 --> 00:16:16,750
and that would be to make this local
variable an instance variable, and to do

289
00:16:16,750 --> 00:16:25,080
that you'd do something like self and
file path equals to file path and

291
00:16:25,080 --> 00:16:31,780
what this does is, so file path, don't
confuse this with. This this happened to

293
00:16:31,780 --> 00:16:38,590
be the same, but you can also write
another thing here like anything so this

295
00:16:38,590 --> 00:16:45,780
is the parameter of the init function so
the balance of txt a will go to this

297
00:16:45,780 --> 00:16:50,950
parameter, so the path of this file will go
to this parameter, and then you create

299
00:16:50,950 --> 00:16:57,820
this instance variable, and that instance
variable will be equal to this path, but

301
00:16:57,820 --> 00:17:03,610
you can use this thing here you can use
it wherever you like inside your class

303
00:17:03,610 --> 00:17:12,940
and in our case, we would like to use it
in here. So we open the self dot filepath

305
00:17:12,940 --> 00:17:18,700
in the write method this time
because we this time we need to write

307
00:17:18,700 --> 00:17:25,330
or to overwrite in more accurately,
to overwrite the current balance which

309
00:17:25,330 --> 00:17:32,980
should be this one for example. We want
to overwrite that to this file. So as file,

311
00:17:32,980 --> 00:17:41,340
this is just a temporary variable file,
and file dot and self dot balance.

313
00:17:41,340 --> 00:17:54,820
Good, let's try this out, and we didn't

315
00:17:54,820 --> 00:18:01,000
get any update in the file here because
I forgot to actually call the commit

317
00:18:01,000 --> 00:18:05,440
method and so once
we withdraw money let's bring that

319
00:18:05,440 --> 00:18:13,590
out in the console, and then account
dot commit without passing any argument

321
00:18:13,590 --> 00:18:19,320
explicitly because implicitly
we are passing the object instance, good.

323
00:18:19,320 --> 00:18:26,800
Let's see what we get this time, and we
got an error there. Invalid literal for

325
00:18:26,800 --> 00:18:39,310
integer with base 10, so this would be
the integer in line six here.

327
00:18:39,310 --> 00:18:44,460
So the value that is being read by this method
it's not converted to an integer.

329
00:18:44,460 --> 00:18:51,550
The reason is that this value has
disappeared from balance dot txt, and this is

331
00:18:51,550 --> 00:18:56,890
reading an empty string, so this is an
empty string that is being read from this

333
00:18:56,890 --> 00:19:01,960
file, and then you try to convert that
and it doesn't work. Now the reason that

335
00:19:01,960 --> 00:19:10,110
we got this empty string, and empty file
here is when we got the previous error,

337
00:19:10,110 --> 00:19:17,710
so here right the argument must be string
not integer, so what Python did was it

339
00:19:17,710 --> 00:19:24,460
opened the file with the method, but then
it was unable to actually write a value

341
00:19:24,460 --> 00:19:30,040
inside that file, so the file
ended up empty.

343
00:19:30,040 --> 00:19:38,680
So let me write the initial value
there, and then now we should be able to

345
00:19:38,680 --> 00:19:50,290
run that again, and yeah now we have
the updated value, so again what we did

347
00:19:50,290 --> 00:19:54,370
is we created the object instance and
then we created the current balance

349
00:19:54,370 --> 00:19:59,350
which was read
from this file which was 1000

351
00:19:59,350 --> 00:20:03,760
in the beginning, and then we
withdrew 100 so the balance was updated.

353
00:20:03,760 --> 00:20:10,810
Then we commit those changes
to this file, so we get my 900 here.

355
00:20:10,810 --> 00:20:23,920
Now same thing if you want to add
let's say 200 and deposit, let's see if

357
00:20:23,920 --> 00:20:31,540
this will work. Yeah, this was printed out.
Let's check the file, yeah, so this is our

359
00:20:31,540 --> 00:20:38,350
new balance, and yeah I hope this
clarifies a few concepts about

361
00:20:38,350 --> 00:20:44,020
object-oriented programming. If you are
creative you can go ahead and expand

363
00:20:44,020 --> 00:20:49,480
this script, so you can add more methods
there and maybe make this more of a real

365
00:20:49,480 --> 00:20:55,390
life application. So great and this is
about this lecture, and in the next

367
00:20:55,390 --> 00:21:01,000
lecture I'll talk about inheritance,
and we'll be expanding this script by

369
00:21:01,000 --> 00:21:05,010
applying inheritance in there.
So talk to you in the next lecture.

